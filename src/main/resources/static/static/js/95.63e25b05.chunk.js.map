{"version":3,"file":"static/js/95.63e25b05.chunk.js","mappings":"4JAGA,MAiBA,EAjBoBA,IAAkC,IAAjC,SAAEC,EAAQ,IAAEC,EAAG,SAAEC,GAAUH,EAY5C,OACII,EAAAA,EAAAA,KAAA,UAAQC,QAZSC,UACjB,UACUC,EAAAA,EAAMC,OAAO,oBAAqB,CACpCC,OAAQ,CAAER,WAAUC,SAExBC,EAASD,EACb,CAAE,MAAOQ,GACLC,QAAQC,MAAM,wBAAyBF,EAAIG,QAC/C,GAI8BC,SAAC,UAAgB,ECyDvD,EArEkBd,IAAmB,IAAlB,SAAEC,GAAUD,EAC3B,MAAOe,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCL,EAAOQ,IAAYH,EAAAA,EAAAA,UAAS,OAC5BI,EAAcC,IAAmBL,EAAAA,EAAAA,UAAS,CAAEM,OAAQ,GAAIC,UAAW,KAGpEC,EAAcnB,UAChB,IACI,MAAMoB,QAAiBnB,EAAAA,EAAMoB,IAAI,kBAAmB,CAChDlB,OAAQ,CAAER,WAAUsB,OAAQF,EAAaE,OAAQC,UAAWH,EAAaG,aAG7ER,EAAUU,EAASE,KAAKA,KAC5B,CAAE,MAAOlB,GACLU,EAASV,EAAIG,QACjB,CAAC,QACGM,GAAW,EACf,GAIEU,EAAgB3B,IAClBc,EAAUD,EAAOe,QAAOC,GAASA,EAAM7B,MAAQA,IAAK,EASxD,OALA8B,EAAAA,EAAAA,YAAU,KACNP,GAAa,GACd,CAACxB,EAAUoB,IAGVH,GAAgBd,EAAAA,EAAAA,KAAA,OAAAU,SAAK,eAErBF,GAAcqB,EAAAA,EAAAA,MAAA,OAAAnB,SAAA,CAAK,UAAQF,MAG3BqB,EAAAA,EAAAA,MAAA,OAAAnB,SAAA,EACImB,EAAAA,EAAAA,MAAA,MAAAnB,SAAA,CAAKb,EAAS,2BACdG,EAAAA,EAAAA,KAAA,SACI8B,KAAK,OACLC,YAAY,aACZC,MAAOf,EAAaE,OACpBc,SAAWC,GAAMhB,EAAgB,IAAKD,EAAcE,OAAQe,EAAEC,OAAOH,WAEzEhC,EAAAA,EAAAA,KAAA,SACI8B,KAAK,OACLC,YAAY,gBACZC,MAAOf,EAAaG,UACpBa,SAAWC,GAAMhB,EAAgB,IAAKD,EAAcG,UAAWc,EAAEC,OAAOH,WAE5EhC,EAAAA,EAAAA,KAAA,UAAQC,QAASoB,EAAYX,SAAC,WAAe,KAE7CV,EAAAA,EAAAA,KAAA,MAAAU,SACKC,EAAOyB,KAAIT,IACRE,EAAAA,EAAAA,MAAA,MAAAnB,SAAA,EACIV,EAAAA,EAAAA,KAAA,MAAAU,SAAKiB,EAAMR,UACXU,EAAAA,EAAAA,MAAA,KAAAnB,SAAA,CAAG,YAAUiB,EAAMP,cACnBS,EAAAA,EAAAA,MAAA,KAAAnB,SAAA,CAAG,aAAWiB,EAAMU,eACpBR,EAAAA,EAAAA,MAAA,KAAAnB,SAAA,CAAG,WAASiB,EAAMW,WAClBtC,EAAAA,EAAAA,KAAA,KAAGuC,KAAM,UAAUZ,EAAM7B,MAAMY,SAAC,iBAAgB,KAChDV,EAAAA,EAAAA,KAACwC,EAAW,CAAC3C,SAAUA,EAAUC,IAAK6B,EAAM7B,IAAKC,SAAU0B,IAAgB,MANtEE,EAAM7B,WAUrB,C","sources":["pages/store/RemoveStore.js","pages/store/StoreList.js"],"sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nconst RemoveStore = ({ username, sno, onRemove }) => {\r\n    const handleRemove = async () => {\r\n        try {\r\n            await axios.delete('/api/store/remove', {\r\n                params: { username, sno },\r\n            });\r\n            onRemove(sno); // 제거 후 상위 컴포넌트에서 상태 업데이트 호출\r\n        } catch (err) {\r\n            console.error('Error removing store:', err.message); // 오류 메시지 출력\r\n        }\r\n    };\r\n\r\n    return (\r\n        <button onClick={handleRemove}>Remove</button> // 제거 버튼\r\n    );\r\n};\r\n\r\nexport default RemoveStore;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport RemoveStore from './RemoveStore'; // RemoveStore 컴포넌트 임포트\r\n\r\nconst StoreList = ({ username }) => {\r\n    const [stores, setStores] = useState([]); // 찜 목록을 저장할 상태\r\n    const [loading, setLoading] = useState(true); // 로딩 상태\r\n    const [error, setError] = useState(null); // 오류 메시지 상태\r\n    const [searchParams, setSearchParams] = useState({ p_name: '', p_address: '' }); // 검색 파라미터 상태\r\n\r\n    // 찜 목록을 가져오는 함수\r\n    const fetchStores = async () => {\r\n        try {\r\n            const response = await axios.get('/api/store/list', {\r\n                params: { username, p_name: searchParams.p_name, p_address: searchParams.p_address },\r\n            });\r\n\r\n            setStores(response.data.data); // API 응답에서 데이터 추출\r\n        } catch (err) {\r\n            setError(err.message); // 오류 발생 시 메시지 설정\r\n        } finally {\r\n            setLoading(false); // 로딩 종료\r\n        }\r\n    };\r\n\r\n    // 제거 함수\r\n    const handleRemove = (sno) => {\r\n        setStores(stores.filter(store => store.sno !== sno)); // 상태에서 해당 스토어 제거\r\n    };\r\n\r\n    // 컴포넌트가 마운트될 때와 검색 파라미터가 변경될 때 호출\r\n    useEffect(() => {\r\n        fetchStores();\r\n    }, [username, searchParams]);\r\n\r\n    // 로딩 중일 때\r\n    if (loading) return <div>Loading...</div>;\r\n    // 오류 발생 시\r\n    if (error) return <div>Error: {error}</div>;\r\n\r\n    return (\r\n        <div>\r\n            <h2>{username}'s Bookmarked Stores</h2>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Store Name\"\r\n                value={searchParams.p_name}\r\n                onChange={(e) => setSearchParams({ ...searchParams, p_name: e.target.value })} // 이름 입력 시 상태 업데이트\r\n            />\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Store Address\"\r\n                value={searchParams.p_address}\r\n                onChange={(e) => setSearchParams({ ...searchParams, p_address: e.target.value })} // 주소 입력 시 상태 업데이트\r\n            />\r\n            <button onClick={fetchStores}>Search</button> {/* 검색 버튼 클릭 시 목록 재조회 */}\r\n\r\n            <ul>\r\n                {stores.map(store => (\r\n                    <li key={store.sno}>\r\n                        <h3>{store.p_name}</h3>\r\n                        <p>Address: {store.p_address}</p>\r\n                        <p>Category: {store.p_category}</p>\r\n                        <p>Rating: {store.p_star}</p>\r\n                        <a href={`/store/${store.sno}`}>View Details</a> {/* 상세 페이지 링크 */}\r\n                        <RemoveStore username={username} sno={store.sno} onRemove={handleRemove} /> {/* 제거 컴포넌트 */}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StoreList;\r\n"],"names":["_ref","username","sno","onRemove","_jsx","onClick","async","axios","delete","params","err","console","error","message","children","stores","setStores","useState","loading","setLoading","setError","searchParams","setSearchParams","p_name","p_address","fetchStores","response","get","data","handleRemove","filter","store","useEffect","_jsxs","type","placeholder","value","onChange","e","target","map","p_category","p_star","href","RemoveStore"],"sourceRoot":""}