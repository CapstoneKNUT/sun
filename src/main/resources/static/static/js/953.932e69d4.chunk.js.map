{"version":3,"file":"static/js/953.932e69d4.chunk.js","mappings":"uKA+DA,QA1DA,WACI,MAAM,SAAEA,IAAaC,EAAAA,EAAAA,MACdC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,GAkBvC,OAfAG,EAAAA,EAAAA,YAAU,KACcC,WAChB,IACI,MAAMC,QAAiBC,EAAAA,EAAMC,IAAI,iDAAiDX,KAClFG,EAAUM,EAASG,KAAKA,MACxBN,GAAW,EACf,CAAE,MAAOO,GACLC,QAAQD,MAAM,yBAA0BA,GACxCP,GAAW,EACf,GAEJS,EAAa,GACd,CAACf,IAGAK,GACOW,EAAAA,EAAAA,KAAA,OAAAC,SAAK,4BAgBZC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYF,SAAA,EACvBC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAKjB,EAAS,gCACK,IAAlBE,EAAOkB,QACJJ,EAAAA,EAAAA,KAAA,KAAAC,SAAG,sEAEHD,EAAAA,EAAAA,KAAA,MAAAC,SACKf,EAAOmB,KAAIC,IACRJ,EAAAA,EAAAA,MAAA,MAAoBC,UAAU,aAAYF,SAAA,EACtCD,EAAAA,EAAAA,KAAA,MAAAC,SAAKK,EAAMC,UACXP,EAAAA,EAAAA,KAAA,KAAAC,SAAIK,EAAME,aACVN,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EAAGD,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,wBAAa,IAAEK,EAAMG,WAChCT,EAAAA,EAAAA,KAAA,UAAQU,QAASA,IAvBpBlB,WACjB,UACUE,EAAAA,EAAMiB,OAAO,mDAAmD3B,SAAgB4B,KACtFzB,EAAUD,EAAO2B,QAAOP,GAASA,EAAMM,MAAQA,KAC/CE,MAAM,uEACV,CAAE,MAAOjB,GACLC,QAAQD,MAAM,wBAAyBA,GACvCiB,MAAM,8EACV,GAe2CC,CAAaT,EAAMM,KAAKX,SAAC,0BAJ3CK,EAAMM,WAWvC,C","sources":["pages/store/Read.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\nfunction Store() {\r\n    const { username } = useParams();  // 사용자 이름을 URL 파라미터로 가져옴\r\n    const [stores, setStores] = useState([]);  // 초기값은 빈 배열\r\n    const [loading, setLoading] = useState(true);  // 로딩 상태\r\n\r\n    // 찜 목록을 조회하는 useEffect\r\n    useEffect(() => {\r\n        const fetchStores = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:8080/api/store/list?username=${username}`);\r\n                setStores(response.data.data);  // API로부터 받은 데이터 설정\r\n                setLoading(false);  // 로딩 완료\r\n            } catch (error) {\r\n                console.error('Error fetching stores:', error);\r\n                setLoading(false);  // 에러 발생 시 로딩 완료\r\n            }\r\n        };\r\n        fetchStores();\r\n    }, [username]);  // username이 변경될 때마다 다시 호출\r\n\r\n    // 로딩 중일 때 메시지 표시\r\n    if (loading) {\r\n        return <div>로딩 중...</div>;\r\n    }\r\n\r\n    // 찜 목록에서 특정 스토어를 제거하는 함수\r\n    const handleRemove = async (sno) => {\r\n        try {\r\n            await axios.delete(`http://localhost:8080/api/store/remove?username=${username}&sno=${sno}`);\r\n            setStores(stores.filter(store => store.sno !== sno));  // 제거 후 상태 업데이트\r\n            alert('스토어가 제거되었습니다.');\r\n        } catch (error) {\r\n            console.error('Error removing store:', error);\r\n            alert('스토어 제거에 실패했습니다.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"store-list\">\r\n            <h1>{username}의 찜 목록</h1>\r\n            {stores.length === 0 ? (\r\n                <p>찜 목록이 비어 있습니다.</p>\r\n            ) : (\r\n                <ul>\r\n                    {stores.map(store => (\r\n                        <li key={store.sno} className=\"store-item\">\r\n                            <h2>{store.p_name}</h2>\r\n                            <p>{store.p_address}</p>\r\n                            <p><strong>연락처:</strong> {store.p_call}</p>\r\n                            <button onClick={() => handleRemove(store.sno)}>찜 해제</button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Store;\r\n"],"names":["username","useParams","stores","setStores","useState","loading","setLoading","useEffect","async","response","axios","get","data","error","console","fetchStores","_jsx","children","_jsxs","className","length","map","store","p_name","p_address","p_call","onClick","delete","sno","filter","alert","handleRemove"],"sourceRoot":""}