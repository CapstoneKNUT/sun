{"version":3,"file":"static/js/472.82cc9bf9.chunk.js","mappings":"uKAIA,MAsDA,EAtDkBA,KACd,MAAM,SAAEC,IAAaC,EAAAA,EAAAA,MACdC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,MAG7BG,EAAcC,UAChB,IACI,MAAMC,QAAiBC,EAAAA,EAAMC,IAAI,kBAAmB,CAChDC,OAAQ,CAAEZ,cAEdG,EAAUM,EAASI,KAAKA,KAC5B,CAAE,MAAOC,GACLR,EAASQ,EAAIC,QACjB,IAGJC,EAAAA,EAAAA,YAAU,KACNT,GAAa,GACd,CAACP,IAeJ,OAAIK,GACOY,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAK,UAAQb,MAIpBY,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACID,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CAAKlB,EAAS,iCACdmB,EAAAA,EAAAA,KAAA,MAAAD,SACKhB,EAAOkB,KAAIC,IACRJ,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAKG,EAAMC,UACXH,EAAAA,EAAAA,KAAA,KAAAD,SAAIG,EAAME,aACVJ,EAAAA,EAAAA,KAAA,UAAQK,QAASA,IAxBhBhB,WACjB,UACUE,EAAAA,EAAMe,OAAO,oBAAqB,CACpCb,OAAQ,CAAEZ,WAAU0B,SAGxBnB,GACJ,CAAE,MAAOO,GACLR,EAASQ,EAAIC,QACjB,GAeuCY,CAAaN,EAAMK,KAAKR,SAAC,mBAH3CG,EAAMK,WAOrB,C","sources":["pages/store/Lists.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst StoreList = () => {\r\n    const { username } = useParams(); // URL에서 username 파라미터를 가져옵니다.\r\n    const [stores, setStores] = useState([]); // 찜목록을 저장할 상태입니다.\r\n    const [error, setError] = useState(null); // 오류 상태를 저장합니다.\r\n\r\n    // 유저의 찜 목록 조회\r\n    const fetchStores = async () => {\r\n        try {\r\n            const response = await axios.get('/api/store/list', {\r\n                params: { username }, // username을 쿼리 파라미터로 전송합니다.\r\n            });\r\n            setStores(response.data.data); // 응답에서 데이터를 가져와 상태를 업데이트합니다.\r\n        } catch (err) {\r\n            setError(err.message); // 오류가 발생하면 오류 메시지를 상태에 저장합니다.\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchStores(); // 컴포넌트가 마운트되면 찜 목록을 가져옵니다.\r\n    }, [username]);\r\n\r\n    // 찜 목록에서 특정 스토어 제거\r\n    const handleRemove = async (sno) => {\r\n        try {\r\n            await axios.delete('/api/store/remove', {\r\n                params: { username, sno }, // username과 sno를 쿼리 파라미터로 전송합니다.\r\n            });\r\n            // 제거 후 다시 목록을 가져옵니다.\r\n            fetchStores();\r\n        } catch (err) {\r\n            setError(err.message); // 오류가 발생하면 오류 메시지를 상태에 저장합니다.\r\n        }\r\n    };\r\n\r\n    if (error) {\r\n        return <div>Error: {error}</div>; // 오류가 발생한 경우 오류 메시지를 보여줍니다.\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>{username}의 찜 목록</h1>\r\n            <ul>\r\n                {stores.map(store => (\r\n                    <li key={store.sno}>\r\n                        <h2>{store.p_name}</h2>\r\n                        <p>{store.p_address}</p>\r\n                        <button onClick={() => handleRemove(store.sno)}>제거</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StoreList;\r\n"],"names":["StoreList","username","useParams","stores","setStores","useState","error","setError","fetchStores","async","response","axios","get","params","data","err","message","useEffect","_jsxs","children","_jsx","map","store","p_name","p_address","onClick","delete","sno","handleRemove"],"sourceRoot":""}